// Generated by dts-bundle-generator v5.9.0

export declare type JsonValue = JsonPrimitiveValue | JsonArray<any> | JsonObject<any> | undefined;
export declare type JsonPrimitiveValue = string | number | boolean | null;
export declare type JsonArray<T extends JsonValue> = T[];
export declare type JsonObject<T extends JsonValue = JsonValue> = {
	[key: string]: T;
};
export interface JsonAdapter<T, U extends JsonValue> {
	adaptToJson(value: T): U;
	recoverFromJson(value: U): T;
}
export declare class JsonConverter<T> {
	#private;
	constructor(adapter: JsonAdapter<T, any>);
	stringify(value: T, space?: string | number): string;
	parse(text: string): T;
}
declare function getIdentityAdapter<T extends JsonValue = JsonValue>(): JsonAdapter<T, T>;
declare function getISODateAdapter(): JsonAdapter<Date, string>;
declare function getArrayJsonAdapter<T, U extends JsonValue = JsonValue>(elementAdapter: JsonAdapter<T, U>): JsonAdapter<T[], JsonArray<U>>;
declare function getSetAdapter<T extends JsonValue = JsonValue>(): JsonAdapter<Set<T>, JsonArray<T>>;
declare function getSetAdapter<T, U extends JsonValue = JsonValue>(elementAdapter: JsonAdapter<T, U>): JsonAdapter<Set<T>, JsonArray<U>>;
declare function getRecordAdapter<T, U extends JsonValue = JsonValue>(valueAdapter: JsonAdapter<T, U>): JsonAdapter<Record<string, T>, JsonObject<U>>;
export declare type MappedProperties<T, P> = Partial<Record<keyof T, P>>;
export declare type PropertyAdapters<T, P = JsonValue> = MappedProperties<T, JsonAdapter<any, P>>;
export interface ObjectAdapterConfig<T, U> {
	ignoreUnmappedProperties: boolean;
	ignoredProperties: (keyof T)[];
}
declare function getObjectAdapter<T, U extends JsonValue = JsonValue>(propertyAdapters: PropertyAdapters<T, U>, config?: Partial<ObjectAdapterConfig<T, U>>): JsonAdapter<T, JsonObject<U>>;
export declare type MapEntry<K, V> = [
	K,
	V
];
export interface MapAdapterConfig<K, V, JK extends JsonValue = JsonValue, JV extends JsonValue = JsonValue> {
	keyAdapter: JsonAdapter<K, JK>;
	valueAdapter: JsonAdapter<V, JV>;
}
declare function getMapAsEntriesAdapter<K, V, JK extends JsonValue = JsonValue, JV extends JsonValue = JsonValue>(config?: Partial<MapAdapterConfig<K, V, JK, JV>>): JsonAdapter<Map<K, V>, JsonArray<MapEntry<JK, JV>>>;
declare function getMapAsRecordAdapter<K, V, JV extends JsonValue = JsonValue>(config?: Partial<MapAdapterConfig<K, V, string, JV>>): JsonAdapter<Map<K, V>, JsonObject<JV>>;
export declare type StringKeyOf<T> = string & keyof T;
declare function getByKeyAdapter<T, R extends Record<string, T>>(keyValuePairs: R): JsonAdapter<T | undefined, StringKeyOf<R> | undefined>;
declare function getByKeyAdapter<T, R extends Record<string, T>>(keyValuePairs: R, defaultKey: StringKeyOf<R>): JsonAdapter<T, StringKeyOf<R>>;
declare function getCustomTypeAdapter<T, U extends JsonValue = JsonValue>(adapter: JsonAdapter<T, U>): JsonAdapter<T, U>;
export declare const JsonAdapters: {
	identity: typeof getIdentityAdapter;
	isoDate: typeof getISODateAdapter;
	array: typeof getArrayJsonAdapter;
	set: typeof getSetAdapter;
	record: typeof getRecordAdapter;
	object: typeof getObjectAdapter;
	mapAsEntries: typeof getMapAsEntriesAdapter;
	mapAsRecord: typeof getMapAsRecordAdapter;
	byKey: typeof getByKeyAdapter;
	custom: typeof getCustomTypeAdapter;
};

export {};
