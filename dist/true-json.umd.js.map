{"version":3,"sources":["webpack://TrueJSON/webpack/universalModuleDefinition","webpack://TrueJSON/./node_modules/lodash.isplainobject/index.js","webpack://TrueJSON/webpack/bootstrap","webpack://TrueJSON/webpack/runtime/compat get default export","webpack://TrueJSON/webpack/runtime/define property getters","webpack://TrueJSON/webpack/runtime/hasOwnProperty shorthand","webpack://TrueJSON/webpack/runtime/make namespace object","webpack://TrueJSON/./src/main/json/JsonConverter.ts","webpack://TrueJSON/./src/main/json/adapter/identity/getIdentityAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/utils.ts","webpack://TrueJSON/./src/main/json/adapter/assertions.ts","webpack://TrueJSON/./src/main/json/adapter/getArrayJsonAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/map/getMapAsEntriesAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getObjectAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/nullish/getNullishAwareCustomAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/JsonAdapters.ts","webpack://TrueJSON/./src/main/json/adapter/identity/getStringIdentityAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/identity/getNumberIdentityAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/identity/getIntegerIdentityAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/identity/getBooleanIdentityAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getISODateAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getDateTimestampAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getSetAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getRecordAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/map/getMapAsRecordAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getByKeyAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getByKeyLenientAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/getCustomAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/nullish/getNullAwareCustomAdapter.ts","webpack://TrueJSON/./src/main/json/adapter/nullish/getUndefinedAwareCustomAdapter.ts"],"names":["root","factory","exports","module","define","amd","self","this","func","transform","funcProto","Function","prototype","objectProto","Object","funcToString","toString","hasOwnProperty","objectCtorString","call","objectToString","getPrototype","getPrototypeOf","arg","value","isObjectLike","result","e","isHostObject","proto","Ctor","constructor","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","defineProperty","enumerable","get","obj","prop","r","Symbol","toStringTag","JsonConverter","adapter","json","JSON","space","stringify","adaptToJson","text","recoverFromJson","parse","getIdentityAdapter","validator","v","object","propertyName","assertFiniteNumber","Number","isFinite","TypeError","assertString","assertValidDate","Date","assertDate","isNaN","getTime","assertArray","Array","isArray","assertEntryTuple","length","assertPlainObject","getArrayJsonAdapter","elementAdapter","array","map","jsonArray","getMapAsEntriesAdapter","config","keyAdapter","valueAdapter","entriesAdapter","entry","jsonEntry","jsonKey","jsonValue","Map","assertMap","getObjectEntries","propertyAdapters","omitUnmappedProperties","omittedProperties","entries","filter","includes","isIgnoredProperty","isUnmappedProperty","shouldPropertyBeIgnored","isNullish","identity","stringIdentity","numberIdentity","integerIdentity","isInteger","assertIntegerNumber","booleanIdentity","assertBoolean","isoDate","date","toJSON","isoDateText","assertDateString","dateTimestamp","timestamp","set","arrayAdapter","Set","assertSet","record","fullConfig","partialConfig","strictPlainObjectCheck","mappedEntries","fromEntries","jsonObject","mapAsEntries","mapAsRecord","mapAsEntriesAdapter","adaptedEntries","byKey","keyValuePairs","find","entryValue","Error","assertStringKeyOf","byKeyLenient","fallbackKey","custom","nullAware","undefinedAware","nullishAware"],"mappings":"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","file":"true-json.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TrueJSON\"] = factory();\n\telse\n\t\troot[\"TrueJSON\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) ||\n      objectToString.call(value) != objectTag || isHostObject(value)) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nmodule.exports = isPlainObject;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import JsonAdapter from '@/json/adapter/JsonAdapter';\n\ninterface CustomJSON {\n\tparse: JSON['parse'];\n\tstringify: JSON['stringify'];\n}\n\nexport default class JsonConverter<T> {\n\n\treadonly #json: CustomJSON;\n\treadonly #adapter: JsonAdapter<T, any>;\n\n\tconstructor(adapter: JsonAdapter<T, any>, json: CustomJSON = JSON) {\n\t\tthis.#json = json;\n\t\tthis.#adapter = adapter;\n\t}\n\n\tpublic stringify(value: T, space?: string | number) {\n\t\treturn this.#json.stringify(this.#adapter.adaptToJson(value), undefined, space);\n\t}\n\n\tpublic parse(text: string) {\n\t\treturn this.#adapter.recoverFromJson(this.#json.parse(text));\n\t}\n\n}\n","import {JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\n\nexport type InputValueValidator = (value: unknown) => void;\n\nexport default function getIdentityAdapter<T extends JsonValue = JsonValue>(\n\t\tvalidator?: InputValueValidator\n): JsonAdapter<T, T> {\n\tif (validator == null) {\n\t\treturn {\n\t\t\tadaptToJson: v => v,\n\t\t\trecoverFromJson: v => v\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tadaptToJson: value => {\n\t\t\t\tvalidator(value);\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\trecoverFromJson: value => {\n\t\t\t\tvalidator(value);\n\t\t\t\treturn value;\n\t\t\t}\n\t\t};\n\t}\n}\n","export function hasOwnProperty(object: unknown, propertyName: PropertyKey): boolean {\n\treturn Object.prototype.hasOwnProperty.call(object, propertyName);\n}\n","import isPlainObject from 'lodash.isplainobject';\nimport {hasOwnProperty} from '@/json/adapter/utils';\nimport {MapEntry} from '@/json/adapter/map/types';\nimport {StringKeyOf} from '@/json/adapter/types';\n\nexport type TypeAssertion<T> = (value: unknown) => asserts value is T;\n\nexport const assertNonNullish: TypeAssertion<NonNullable<unknown>> = value => {\n\tif (value === null) {\n\t\tthrow new TypeError('input value is null');\n\t}\n\tif (value === undefined) {\n\t\tthrow new TypeError('input value is undefined');\n\t}\n};\n\nexport const assertBoolean: TypeAssertion<string> = value => {\n\tif (typeof value !== 'boolean') {\n\t\tthrow new TypeError('input value is not a boolean');\n\t}\n};\n\nexport const assertIntegerNumber: TypeAssertion<number> = value => {\n\tif (typeof value !== 'number' || !Number.isInteger(value)) {\n\t\tthrow new TypeError('input value is not an integer');\n\t}\n};\n\nexport const assertFiniteNumber: TypeAssertion<number> = value => {\n\tif (typeof value !== 'number' || !Number.isFinite(value)) {\n\t\tthrow new TypeError('input value is not a finite number');\n\t}\n};\n\nexport const assertString: TypeAssertion<string> = value => {\n\tif (typeof value !== 'string') {\n\t\tthrow new TypeError('input value is not a string');\n\t}\n};\n\nexport const assertDateString: TypeAssertion<string> = value => {\n\tassertString(value);\n\n\tif (Number.isNaN(new Date(value).getTime())) {\n\t\tthrow new TypeError('input value has not a valid date format');\n\t}\n};\n\nexport const assertDate: TypeAssertion<Date> = value => {\n\tif (!(value instanceof Date)) {\n\t\tthrow new TypeError('input value is not a date');\n\t}\n};\n\nexport const assertValidDate: TypeAssertion<Date> = value => {\n\tassertDate(value);\n\n\tif (Number.isNaN(value.getTime())) {\n\t\tthrow new TypeError('input value is not a valid date');\n\t}\n};\n\nexport const assertArray: TypeAssertion<unknown[]> = value => {\n\tif (!Array.isArray(value)) {\n\t\tthrow new TypeError('input value is not an array');\n\t}\n};\n\nexport const assertSet: TypeAssertion<Set<unknown>> = value => {\n\tif (!(value instanceof Set)) {\n\t\tthrow new TypeError('input value is not a set');\n\t}\n};\n\nexport const assertMap: TypeAssertion<Map<unknown, unknown>> = value => {\n\tif (!(value instanceof Map)) {\n\t\tthrow new TypeError('input value is not a map');\n\t}\n};\n\nexport function assertEntryTuple(value: unknown): asserts value is MapEntry<unknown, unknown> {\n\tif (!Array.isArray(value) || value.length !== 2) {\n\t\tthrow new TypeError('input value is not a tuple');\n\t}\n}\n\nexport const assertPlainObject: TypeAssertion<Record<PropertyKey, unknown>> = value => {\n\tif (!isPlainObject(value)) {\n\t\tthrow new TypeError('input value is not a plain object');\n\t}\n};\n\nexport function assertStringKeyOf<T>(value: unknown, object: T): asserts value is StringKeyOf<T> {\n\tassertString(value);\n\n\tif (!hasOwnProperty(object, value)) {\n\t\tthrow new Error('input value is not a valid key');\n\t}\n}\n","import {JsonArray, JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertArray} from '@/json/adapter/assertions';\n\nexport default function getArrayJsonAdapter<T, U extends JsonValue = JsonValue>(\n\t\telementAdapter: JsonAdapter<T, U>\n): JsonAdapter<T[], JsonArray<U>> {\n\treturn {\n\t\tadaptToJson(array) {\n\t\t\tassertArray(array);\n\t\t\treturn array.map(e => elementAdapter.adaptToJson(e));\n\t\t},\n\t\trecoverFromJson(jsonArray) {\n\t\t\tassertArray(jsonArray);\n\t\t\treturn jsonArray.map(e => elementAdapter.recoverFromJson(e as U));\n\t\t}\n\t};\n}\n","import {JsonArray, JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport getArrayJsonAdapter from '@/json/adapter/getArrayJsonAdapter';\nimport getIdentityAdapter from '@/json/adapter/identity/getIdentityAdapter';\nimport {MapAdapterConfig, MapEntry} from '@/json/adapter/map/types';\nimport {assertEntryTuple, assertMap} from '@/json/adapter/assertions';\n\nexport default function getMapAsEntriesAdapter<K, V, JK extends JsonValue = JsonValue, JV extends JsonValue = JsonValue>(\n\t\tconfig?: Partial<MapAdapterConfig<K, V, JK, JV>>\n): JsonAdapter<Map<K, V>, JsonArray<MapEntry<JK, JV>>> {\n\n\tconst keyAdapter: JsonAdapter<K, JK> = config?.keyAdapter ?? getIdentityAdapter<any>();\n\tconst valueAdapter: JsonAdapter<V, JV> = config?.valueAdapter ?? getIdentityAdapter<any>();\n\n\tconst entriesAdapter = getArrayJsonAdapter<MapEntry<K, V>, MapEntry<JK, JV>>({\n\t\tadaptToJson(entry) {\n\n\t\t\tassertEntryTuple(entry);\n\n\t\t\tconst [key, value] = entry;\n\n\t\t\treturn [\n\t\t\t\tkeyAdapter.adaptToJson(key),\n\t\t\t\tvalueAdapter.adaptToJson(value)\n\t\t\t];\n\n\t\t},\n\t\trecoverFromJson(jsonEntry) {\n\n\t\t\tassertEntryTuple(jsonEntry);\n\n\t\t\tconst [jsonKey, jsonValue] = jsonEntry;\n\n\t\t\treturn [\n\t\t\t\tkeyAdapter.recoverFromJson(jsonKey),\n\t\t\t\tvalueAdapter.recoverFromJson(jsonValue)\n\t\t\t];\n\n\t\t}\n\t});\n\n\treturn {\n\t\tadaptToJson(map) {\n\t\t\tassertMap(map);\n\t\t\treturn entriesAdapter.adaptToJson([...map]);\n\t\t},\n\t\trecoverFromJson(jsonArray) {\n\t\t\treturn new Map(entriesAdapter.recoverFromJson(jsonArray));\n\t\t}\n\t};\n\n}\n","import {JsonObject, JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {StringKeyOf} from '@/json/adapter/types';\nimport {hasOwnProperty} from '@/json/adapter/utils';\nimport {assertPlainObject} from '@/json/adapter/assertions';\n\nexport type PropertyAdapters<T> = {\n\t[K in keyof T]?: JsonAdapter<T[K], JsonValueFor<T[K]>>;\n}\n\ntype JsonValueFor<T, U extends JsonValue = JsonValue> =\n\t\tU\n\t\t| (T extends null ? null : never)\n\t\t| (T extends undefined ? undefined : never);\n\nexport interface ObjectAdapterConfig<T = unknown> {\n\tstrictPlainObjectCheck: boolean;\n\tomitUnmappedProperties: boolean;\n\tomittedProperties: (keyof T)[];\n}\n\nexport default function getObjectAdapter<T>(\n\t\tpropertyAdapters: PropertyAdapters<T>,\n\t\tconfig?: Partial<ObjectAdapterConfig<T>>\n): JsonAdapter<T, JsonObject> {\n\n\tconst fullConfig = completeConfigWithDefaultValues(config);\n\n\treturn {\n\t\tadaptToJson(object) {\n\n\t\t\tif (fullConfig.strictPlainObjectCheck) {\n\t\t\t\tassertPlainObject(object);\n\t\t\t}\n\n\t\t\tconst mappedEntries = getObjectEntries(object, propertyAdapters, fullConfig)\n\t\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\t\tconst adapter = propertyAdapters[key];\n\t\t\t\t\t\treturn [key, adapter ? adapter.adaptToJson(value) : value];\n\t\t\t\t\t});\n\n\t\t\treturn Object.fromEntries(mappedEntries);\n\n\t\t},\n\t\trecoverFromJson(jsonObject) {\n\n\t\t\tassertPlainObject(jsonObject);\n\n\t\t\tconst mappedEntries = getObjectEntries(jsonObject, propertyAdapters, fullConfig)\n\t\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\t\tconst adapter: JsonAdapter<any, any> | undefined = propertyAdapters[key as keyof T];\n\t\t\t\t\t\treturn [key, adapter ? adapter.recoverFromJson(value) : value];\n\t\t\t\t\t});\n\n\t\t\treturn Object.fromEntries(mappedEntries);\n\n\t\t}\n\t};\n\n}\n\nfunction completeConfigWithDefaultValues<T>(partialConfig?: Partial<ObjectAdapterConfig<T>>): ObjectAdapterConfig<T> {\n\treturn {\n\t\tstrictPlainObjectCheck: false,\n\t\tomitUnmappedProperties: false,\n\t\tomittedProperties: [],\n\t\t...partialConfig\n\t};\n}\n\nfunction getObjectEntries<T extends Record<string, any>>(object: T, propertyAdapters: PropertyAdapters<any>, config: ObjectAdapterConfig<any>) {\n\n\tconst {\n\t\tomitUnmappedProperties,\n\t\tomittedProperties\n\t} = config;\n\n\tconst entries: [StringKeyOf<T>, any][] = Object.entries(object);\n\n\tif (!omitUnmappedProperties && omittedProperties.length === 0) {\n\t\treturn entries;\n\t}\n\n\treturn entries.filter(([key]) => !shouldPropertyBeIgnored(key, propertyAdapters, config));\n\n}\n\nfunction shouldPropertyBeIgnored(propertyName: string, propertyAdapters: PropertyAdapters<any>, config: ObjectAdapterConfig<any>) {\n\treturn isIgnoredProperty(propertyName, config)\n\t\t\t|| config.omitUnmappedProperties && isUnmappedProperty(propertyName, propertyAdapters);\n}\n\nfunction isIgnoredProperty(propertyName: string, config: ObjectAdapterConfig<any>) {\n\tconst {omittedProperties} = config;\n\treturn omittedProperties.includes(propertyName);\n}\n\nfunction isUnmappedProperty(propertyName: string, propertyAdapters: PropertyAdapters<any>) {\n\treturn !hasOwnProperty(propertyAdapters, propertyName);\n}\n","import {JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\n\nexport default function getNullishAwareCustomAdapter<T, U extends JsonValue = JsonValue>(\n\t\tadapter: JsonAdapter<T, U>): JsonAdapter<T | null | undefined, U | null | undefined> {\n\treturn {\n\t\tadaptToJson(value) {\n\t\t\tif (isNullish(value)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\treturn adapter.adaptToJson(value);\n\t\t},\n\t\trecoverFromJson(value) {\n\t\t\tif (isNullish(value)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\treturn adapter.recoverFromJson(value);\n\t\t}\n\t};\n}\n\nfunction isNullish(value: unknown): value is null | undefined {\n\treturn value == null;\n}\n","import getIdentityAdapter from '@/json/adapter/identity/getIdentityAdapter';\nimport getISODateAdapter from '@/json/adapter/getISODateAdapter';\nimport getDateTimestampAdapter from '@/json/adapter/getDateTimestampAdapter';\nimport getArrayJsonAdapter from '@/json/adapter/getArrayJsonAdapter';\nimport getSetAdapter from '@/json/adapter/getSetAdapter';\nimport getRecordAdapter from '@/json/adapter/getRecordAdapter';\nimport getMapAsEntriesAdapter from '@/json/adapter/map/getMapAsEntriesAdapter';\nimport getMapAsRecordAdapter from '@/json/adapter/map/getMapAsRecordAdapter';\nimport getObjectAdapter from '@/json/adapter/getObjectAdapter';\nimport getByKeyAdapter from '@/json/adapter/getByKeyAdapter';\nimport getByKeyLenientAdapter from '@/json/adapter/getByKeyLenientAdapter';\nimport getCustomAdapter from '@/json/adapter/getCustomAdapter';\nimport getNullishAwareCustomAdapter from '@/json/adapter/nullish/getNullishAwareCustomAdapter';\nimport getUndefinedAwareCustomAdapter from '@/json/adapter/nullish/getUndefinedAwareCustomAdapter';\nimport getNullAwareCustomAdapter from '@/json/adapter/nullish/getNullAwareCustomAdapter';\nimport getStringIdentityAdapter from '@/json/adapter/identity/getStringIdentityAdapter';\nimport getNumberIdentityAdapter from '@/json/adapter/identity/getNumberIdentityAdapter';\nimport getIntegerIdentityAdapter from '@/json/adapter/identity/getIntegerIdentityAdapter';\nimport getBooleanIdentityAdapter from '@/json/adapter/identity/getBooleanIdentityAdapter';\n\nconst JsonAdapters = {\n\tidentity: getIdentityAdapter,\n\tstringIdentity: getStringIdentityAdapter,\n\tnumberIdentity: getNumberIdentityAdapter,\n\tintegerIdentity: getIntegerIdentityAdapter,\n\tbooleanIdentity: getBooleanIdentityAdapter,\n\tisoDate: getISODateAdapter,\n\tdateTimestamp: getDateTimestampAdapter,\n\tarray: getArrayJsonAdapter,\n\tset: getSetAdapter,\n\trecord: getRecordAdapter,\n\tmapAsEntries: getMapAsEntriesAdapter,\n\tmapAsRecord: getMapAsRecordAdapter,\n\tobject: getObjectAdapter,\n\tbyKey: getByKeyAdapter,\n\tbyKeyLenient: getByKeyLenientAdapter,\n\tcustom: getCustomAdapter,\n\tnullAware: getNullAwareCustomAdapter,\n\tundefinedAware: getUndefinedAwareCustomAdapter,\n\tnullishAware: getNullishAwareCustomAdapter\n};\n\nexport default JsonAdapters;\n","import JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertString} from '@/json/adapter/assertions';\nimport getIdentityAdapter from '@/json/adapter/identity/getIdentityAdapter';\n\nexport default function getStringIdentityAdapter(): JsonAdapter<string, string> {\n\treturn getIdentityAdapter(value => assertString(value));\n}\n","import JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertFiniteNumber} from '@/json/adapter/assertions';\nimport getIdentityAdapter from '@/json/adapter/identity/getIdentityAdapter';\n\nexport default function getNumberIdentityAdapter(): JsonAdapter<number, number> {\n\treturn getIdentityAdapter(value => assertFiniteNumber(value));\n}\n","import JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertIntegerNumber} from '@/json/adapter/assertions';\nimport getIdentityAdapter from '@/json/adapter/identity/getIdentityAdapter';\n\nexport default function getIntegerIdentityAdapter(): JsonAdapter<number, number> {\n\treturn getIdentityAdapter(value => assertIntegerNumber(value));\n}\n","import JsonAdapter from '@/json/adapter/JsonAdapter';\nimport getIdentityAdapter from '@/json/adapter/identity/getIdentityAdapter';\nimport {assertBoolean} from '@/json/adapter/assertions';\n\nexport default function getBooleanIdentityAdapter(): JsonAdapter<boolean, boolean> {\n\treturn getIdentityAdapter(value => assertBoolean(value));\n}\n","import JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertDateString, assertValidDate} from '@/json/adapter/assertions';\n\nexport default function getISODateAdapter(): JsonAdapter<Date, string> {\n\treturn {\n\t\tadaptToJson(date) {\n\t\t\tassertValidDate(date);\n\t\t\treturn date.toJSON();\n\t\t},\n\t\trecoverFromJson(isoDateText) {\n\t\t\tassertDateString(isoDateText);\n\t\t\treturn new Date(isoDateText);\n\t\t}\n\t};\n}\n","import JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertFiniteNumber, assertValidDate} from '@/json/adapter/assertions';\n\nexport default function getDateTimestampAdapter(): JsonAdapter<Date, number> {\n\treturn {\n\t\tadaptToJson(date) {\n\t\t\tassertValidDate(date);\n\t\t\treturn date.getTime();\n\t\t},\n\t\trecoverFromJson(timestamp) {\n\t\t\tassertFiniteNumber(timestamp);\n\t\t\treturn new Date(timestamp);\n\t\t}\n\t};\n}\n","import {JsonArray, JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport getArrayAdapter from '@/json/adapter/getArrayJsonAdapter';\nimport getIdentityAdapter from '@/json/adapter/identity/getIdentityAdapter';\nimport {assertArray, assertSet} from '@/json/adapter/assertions';\n\nexport default function getSetAdapter<T extends JsonValue = JsonValue>(): JsonAdapter<Set<T>, JsonArray<T>>;\nexport default function getSetAdapter<T, U extends JsonValue = JsonValue>(elementAdapter: JsonAdapter<T, U>): JsonAdapter<Set<T>, JsonArray<U>>;\nexport default function getSetAdapter<T, >(elementAdapter: JsonAdapter<T, any> = getIdentityAdapter()): JsonAdapter<Set<T>, JsonArray<any>> {\n\n\tconst arrayAdapter = getArrayAdapter(elementAdapter);\n\n\treturn {\n\t\tadaptToJson(set) {\n\t\t\tassertSet(set);\n\t\t\treturn arrayAdapter.adaptToJson([...set]);\n\t\t},\n\t\trecoverFromJson(jsonArray) {\n\t\t\tassertArray(jsonArray);\n\t\t\treturn new Set(arrayAdapter.recoverFromJson(jsonArray));\n\t\t}\n\t};\n\n}\n","import {JsonObject, JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertPlainObject} from '@/json/adapter/assertions';\n\nexport interface RecordAdapterConfig {\n\tstrictPlainObjectCheck: boolean;\n}\n\nexport default function getRecordAdapter<T, U extends JsonValue = JsonValue>(\n\t\tvalueAdapter: JsonAdapter<T, U>,\n\t\tconfig?: RecordAdapterConfig\n): JsonAdapter<Record<string, T>, JsonObject<U>> {\n\n\tconst fullConfig = completeConfigWithDefaultValues(config);\n\n\treturn {\n\t\tadaptToJson(object) {\n\n\t\t\tif (fullConfig.strictPlainObjectCheck) {\n\t\t\t\tassertPlainObject(object);\n\t\t\t}\n\n\t\t\tconst mappedEntries = Object.entries(object)\n\t\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\t\treturn [key, valueAdapter.adaptToJson(value)];\n\t\t\t\t\t});\n\n\t\t\treturn Object.fromEntries(mappedEntries);\n\n\t\t},\n\t\trecoverFromJson(jsonObject) {\n\n\t\t\tassertPlainObject(jsonObject);\n\n\t\t\tconst mappedEntries = Object.entries(jsonObject)\n\t\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\t\treturn [key, valueAdapter.recoverFromJson(value)];\n\t\t\t\t\t});\n\n\t\t\treturn Object.fromEntries(mappedEntries);\n\n\t\t}\n\t};\n\n}\n\nfunction completeConfigWithDefaultValues(partialConfig?: Partial<RecordAdapterConfig>): RecordAdapterConfig {\n\treturn {\n\t\tstrictPlainObjectCheck: false,\n\t\t...partialConfig\n\t};\n}\n","import {JsonObject, JsonValue} from '@/json/types';\nimport {MapAdapterConfig} from '@/json/adapter/map/types';\nimport getMapAsEntriesAdapter from '@/json/adapter/map/getMapAsEntriesAdapter';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertPlainObject} from '@/json/adapter/assertions';\n\nexport default function getMapAsRecordAdapter<K, V, JV extends JsonValue = JsonValue>(\n\t\tconfig?: Partial<MapAdapterConfig<K, V, string, JV>>\n): JsonAdapter<Map<K, V>, JsonObject<JV>> {\n\n\tconst mapAsEntriesAdapter = getMapAsEntriesAdapter(config);\n\n\treturn {\n\t\tadaptToJson(map) {\n\t\t\tconst adaptedEntries = mapAsEntriesAdapter.adaptToJson(map);\n\t\t\treturn Object.fromEntries(adaptedEntries);\n\t\t},\n\t\trecoverFromJson(jsonObject) {\n\t\t\tassertPlainObject(jsonObject);\n\t\t\tconst entries = Object.entries(jsonObject);\n\t\t\treturn mapAsEntriesAdapter.recoverFromJson(entries);\n\t\t}\n\t};\n\n}\n","import {StringKeyOf} from '@/json/adapter/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {assertStringKeyOf} from '@/json/adapter/assertions';\n\n// TODO improve types so unknown values are not accepted\nexport default function getByKeyAdapter<T, R extends Record<string, T>>(\n\t\tkeyValuePairs: R\n): JsonAdapter<T, StringKeyOf<R>> {\n\treturn {\n\t\tadaptToJson(value) {\n\n\t\t\tconst entry = Object.entries(keyValuePairs).find(([, entryValue]) => value === entryValue);\n\n\t\t\tif (entry) {\n\t\t\t\tconst [key] = entry;\n\t\t\t\treturn key;\n\t\t\t}\n\n\t\t\tthrow new Error('input value is not associated with any key');\n\n\t\t},\n\t\trecoverFromJson(key) {\n\t\t\tassertStringKeyOf(key, keyValuePairs);\n\t\t\treturn keyValuePairs[key];\n\t\t}\n\t};\n}\n","import {StringKeyOf} from '@/json/adapter/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\nimport {hasOwnProperty} from '@/json/adapter/utils';\nimport {assertString} from '@/json/adapter/assertions';\n\nexport default function getByKeyLenientAdapter<T, R extends Record<string, T> = Record<string, T>>(keyValuePairs: R): JsonAdapter<T | undefined, StringKeyOf<R> | undefined>;\nexport default function getByKeyLenientAdapter<T, R extends Record<string, T> = Record<string, T>>(keyValuePairs: R, fallbackKey: StringKeyOf<R>): JsonAdapter<T, StringKeyOf<R>>;\nexport default function getByKeyLenientAdapter<T, R extends Record<string, T> = Record<string, T>>(keyValuePairs: R, fallbackKey?: StringKeyOf<R>): JsonAdapter<T | undefined, StringKeyOf<R> | undefined> {\n\treturn {\n\t\tadaptToJson(value) {\n\n\t\t\tconst entry = Object.entries(keyValuePairs).find(([, entryValue]) => value === entryValue);\n\n\t\t\tif (entry) {\n\t\t\t\tconst [key] = entry;\n\t\t\t\treturn key;\n\t\t\t}\n\n\t\t\treturn fallbackKey;\n\n\t\t},\n\t\trecoverFromJson(key) {\n\n\t\t\tif (fallbackKey === undefined && key === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tassertString(key);\n\n\t\t\tif (hasOwnProperty(keyValuePairs, key)) {\n\t\t\t\treturn keyValuePairs[key];\n\t\t\t}\n\n\t\t\treturn fallbackKey != null ? keyValuePairs[fallbackKey] : undefined;\n\n\t\t}\n\t};\n}\n","import {JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\n\n// This method exists for type inference purposes only\nexport default function getCustomAdapter<T, U extends JsonValue = JsonValue>(adapter: JsonAdapter<T, U>): JsonAdapter<T, U> {\n\treturn adapter;\n}\n","import {JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\n\nexport default function getNullAwareCustomAdapter<T, U extends JsonValue = JsonValue>(\n\t\tadapter: JsonAdapter<T, U>): JsonAdapter<T | null, U | null> {\n\treturn {\n\t\tadaptToJson(value) {\n\t\t\tif (value === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn adapter.adaptToJson(value);\n\t\t},\n\t\trecoverFromJson(value) {\n\t\t\tif (value === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn adapter.recoverFromJson(value);\n\t\t}\n\t};\n}\n","import {JsonValue} from '@/json/types';\nimport JsonAdapter from '@/json/adapter/JsonAdapter';\n\nexport default function getUndefinedAwareCustomAdapter<T, U extends JsonValue = JsonValue>(\n\t\tadapter: JsonAdapter<T, U>): JsonAdapter<T | undefined, U | undefined> {\n\treturn {\n\t\tadaptToJson(value) {\n\t\t\tif (value === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn adapter.adaptToJson(value);\n\t\t},\n\t\trecoverFromJson(value) {\n\t\t\tif (value === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn adapter.recoverFromJson(value);\n\t\t}\n\t};\n}\n"],"sourceRoot":""}